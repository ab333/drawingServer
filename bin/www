#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('drawing:server');
var http = require('http');
var socketIo = require('socket.io');
var fs = require('fs'); // File system

/**
 * Get port from environment and store in Express.
 */

app.use(function(req, res, next) {
    console.log("_____________________________g");
    next();
});
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketIo.listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// array of all lines drawn
var lineHistory = new Array();
var players = new Array(); // player: username, socketId, status, currentRoom
var rooms = new Array(); // room: players[], Id, channelId, status, word1, word2, spy, currentTurn, turnOrder, numOfPlayers, lineHistory
var wordsPath = "words_list_EN.txt";
var words = fs.readFileSync(wordsPath).toString().split('\n');
rooms.push(new Room(0));
rooms[0].status = "closed";
// event-handler for new incoming connections
io.on('connection', function (socket) {
    //console.log(socket.io.engine.id);
    console.log("new connection. socket Id : " + socket.id);

    //console.log(getRandomWord());


    //socket.join("0");
    socket.username = 'd7oome';
    // first send the history to the new client
    // NOTE not effective as it will emit every line separately-
    // -instead of sending the whole array once.

    /*for (var i in lineHistory) {
     socket.emit('draw_line', { line: lineHistory[i] } );
     }*/

    // add handler for message type "draw_line".

    socket.on('initialize_gameboard', function (data) {
        roomId = data.roomId;
        username = data.username;
        socket.join(roomId);
        room = getRoomByRoomId(roomId);
        // Delete the following code!1
        if(!getPlayerByUsername(username)){
            player = new Player(username, socket.id);
            player.status = "logged in";
            players.push(player);
        }
        // END. note: you may delete the next block too.
        if(!room) {
            criteria = {roomId: roomId};
            roomId = findAndCreateRoom(socket, criteria, username);
            joinRoom(socket, roomId, username);
            room = getRoomByRoomId(roomId);
            console.log(roomId);
        }
        lineHistory = room.lineHistory;
        for (var i in lineHistory) {
            socket.emit('draw_line', { line: lineHistory[i] } );
        }

    });

    socket.on('draw_line', function (data) {
        //find room index
        /*indexes = rooms.map(function(obj, index) {
            if(obj.Id == data.room.Id) {
                return index;
            }
        }).filter(isFinite);
        roomIndex = indexes[0];*/
        // add received line to history
        // verify if sender is the current turn player

        roomId = data.roomId;
        room = getRoomByRoomId(roomId);
        username = data.username;
        line = data.line;

        room.lineHistory.push(line);
        // send line to room
        io.sockets.in(roomId).emit('draw_line', { line: data.line });
        //console.log(Object.keys(io.sockets.sockets)); // get all socket Ids in all rooms
        //console.log(socket.username);
        //console.log( findClientsSocketByRoomId('0'));// doesn't work
        //console.log(Object.keys(io.sockets.adapter.rooms['1'].sockets));
        //var clients = io.sockets.adapter.rooms['Room Name'].sockets;
        console.log(Object.keys( io.sockets.adapter.sids[socket.id] )); //get rooms which socket is currently in
        //console.log(Object.keys( socket.rooms )); //get rooms which socket is currently in
    });

    socket.on('register', function (username) {
        player = new Player(username, socket.id);
        player.status = "logged in";
        players.push(player);
        console.log(players);
        socket.emit('registration_succ');
    });
    socket.on('login', function (username) {
        player = getPlayerByUsername(username);
        if(!player) {
            socket.emit('no_such_user');
            return;
        }
        player.socketId = socket.id;
        player.status = "logged in";
        socket.emit('logged_in_succ');
    });
    //
    socket.on('find_room', function (data) {
        username = data.username;
        criteria = data.criteria;
        roomId = findAndCreateRoom(socket, criteria, username); // returns RoomId

        joinRoom(socket, roomId, username);
        roomPlayersUsername = getRoomPlayersUsername(getRoomByRoomId(roomId));
        io.emit('joined_room', { roomId: roomId, players: roomPlayersUsername}); // TODO send just to the players in the room
        socket.join(roomId);
        console.log("joined room:");
        console.log(getRoomByRoomId(roomId));
        console.log("All Rooms");
        console.log(rooms);
        logPlayersInRooms();
    });

    socket.on('start_game', function (data) {
        // Artists shouldn't know the other word!
        roomId = data;
        room = getRoomByRoomId(roomId);
        if(!room)
            return;
        player = getPlayerBySocketId(socket.id);
        if(!player)
            return;
        if(!verifyUsernameInRoom(player.username, roomId))
            return;
        room.status = "started";
        room.word2 = "You Are The Spy!";
        room.turn = 0; // first player turn; check
        //data.room.players = shuffle(data.room.players); // to define turn order

        // getting The Spy and sending him a message
        spyIndex = getRandomInt(0,room.players.length-1);
        spySocketId = room.players[spyIndex].socketId;
        console.log("spy socket id:");
        console.log(spySocketId);
        io.to(spySocketId).emit('game_started', { word: room.word2 });

        // setting the word and sending it to The Artists
        room.word1 = getRandomWord();
        //Sending the actual word to the Artists
        for(i=0;i<room.players.length;i++) {
            if(i==spyIndex)
                continue;
            artistSocketId = room.players[i].socketId;
            console.log("artist socket id:");
            console.log(artistSocketId);
            io.to(artistSocketId).emit('game_started', { word: room.word1 });
        }
    });

    socket.on('end_my_turn', function (data) {
        //many verification needed!
        room = data.room;
        player = data.player;
        room.currentTurn = ( room.currentTurn + 1 ) % room.players.length;
        socket.broadcast.to(room.id).emit('proceed_to_next_turn');
    });


});


/**
 * My Functions
 */


function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getRandomWord() {
    wordIndex = getRandomInt(0, words.length);
    return words[wordIndex];
}

function findAndCreateRoom(socket, criteria, username) {
    if(criteria.roomId) {
        console.log("join Sepicific room");
        return findOrCreateSpecificRoom(socket, criteria, username);
    }
    player = getPlayerByUsername(username);
    console.log("username");
    console.log(username);
    console.log("player:");
    console.log(player);

    if(!player)
        return;
    var availableRooms = rooms.filter(function( obj ) {
        return obj.status == "open" && obj.type == "public";
    });
    if(availableRooms.length == 0) {
        room = new Room(getRandomInt(1,10000));
        rooms.push(room);
    }
    else {
        room = availableRooms[0];
    }
    return room.id;
}

function findOrCreateSpecificRoom(socket, criteria, username) {
    // this function needs to check if the room is public and not started yet
    roomId = criteria.roomId;
    console.log(roomId);
    player = getPlayerByUsername(username);
    if(!player)
        return;
    var availableRooms = rooms.filter(function( obj ) {
        return obj.status == "open" && obj.type == "public" && obj.id == roomId;
    });
    if(availableRooms.length == 0) {
        room = new Room(roomId);
        rooms.push(room);
    }
    else {
        room = availableRooms[0];
    }
    return room.id;
}

function joinRoom(socket, roomId, username) {
    if(verifyUsernameInRoom(username, roomId))
        return false;
    room = getRoomByRoomId(roomId);
    player = getPlayerByUsername(username);
    room.players.push(player);
    room.numOfPlayers++;
    socket.join(room.id);
    player.currentRoom = room.id;
    player.status = "in a room";
    return true;

}

function getPlayerByUsername(username) {
    var result = players.filter(function( player ) {
        return player.username == username;
    });
    if(result.length == 0)
        return null;
    else if(result.length == 1)
        return result[0];
    else
        return null; //users with the same username

}

function getRoomByRoomId(roomId) {
    var result = rooms.filter(function( room ) {
        return room.id == roomId;
    });
    if(result.length == 0)
        return null;
    else if(result.length == 1)
        return result[0];
    else
        return null;
}

function getPlayerBySocketId(socketId) {
    var result = players.filter(function( player ) {
        return player.socketId == socketId;
    });
    if(result.length == 0)
        return null;
    else if(result.length == 1)
        return result[0];
    else
        return null;
}

function getRoomBySocketId(socketId) {
    var result = rooms.filter(function( room ) {
        return room.id == socketId;
    });
    if(result.length == 0)
        return null;
    else if(result.length == 1)
        return result[0];
    else
        return null;
}

function getRoomPlayersUsername(room) {
    var usernames = new Array();
    for(i=0;i<room.players.length;i++)
        usernames.push(room.players[i].username);
    return usernames;
}

function verifyUsernameSocketOwner(username, socket) {
    var result = players.filter(function( player ) {
        return player.socketId == socket.id && player.username == username;
    });
    if(result.length == 0)
        return false;
    else if(result.length == 1)
        return true;
    else
        return true; // I don't know if this will ever get fired
}

function verifyUsernameInRoom(username, roomId) {
    room = getRoomByRoomId(roomId);
    var result = room.players.filter(function( player ) {
        return player.username == username;
    });
    if(result.length == 0)
        return false;
    else if(result.length == 1)
        return true;
    else
        return true; // I don't know if this will ever get fired
}

function verifyUsernameCurrentTurn(username, roomId) {
    room = getRoomByRoomId(roomId);
    if(room == null)
        return null; // no such room
    if(room.getCurrentTurnUsername() == username)
        return true;
    else
        return false;
}

function logPlayersInRooms() {
    playersString = "";
    for(room in rooms) {
        playersString = "";
        playersString = "Players in room ";
        playersString = playersString + rooms[room].id + " are: ";
        for(player in rooms[room].players) {
            playersString = playersString + rooms[room].players[player].username     +", ";
        }
        console.log(playersString);
    }
}


function Player (username, socketId) {
    this.username = username;
    this.socketId = socketId;
    this.currentRoom = 0;
    this.index = "";
    this.status = "";
}

Player.prototype.getInfo = function() {
    return this.username + ' ' + this.socketId + ' apple';
};

function Room (id) {
    this.players = [];
    this.lineHistory = [];
    this.id = id; // same as channelId
    this.channelId = ""; // not used
    this.status = "open"; //open, word_choosing, running, finished
    this.type = "public"; //public, private
    this.word1 = "";
    this.word2 = "";
    this.spyPlayerIndex = "";
    this.currentTurn = "";
    this.numOfPlayers = "";
    this.turnOrder = "";
    this.scoreLimit = "";
    this.hostPlayer = "";
}

Room.prototype.getCurrentTurnUsername = function() {
    return this.players[this.currentTurn].username;
};

function LineHistory() {
    this.line;
}

function Line() {
    this.x;
    this.y;
}

function findClientsSocketByRoomId(roomId) {
    var res = []
        , room = io.sockets.adapter.rooms[roomId];
    if (room) {
        for (var id in room) {
            res.push(io.sockets.adapter.nsp.connected[id]);
        }
    }
    return res;
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
